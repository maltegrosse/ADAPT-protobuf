syntax = "proto3";
package ADAPT.Equipment;

import "Common.proto";
import "Representations.proto";
import "Shapes.proto";
import "Notes.proto";
option go_package = "github.com/maltegrosse/adapt-go/Equipment";

message Connector {
    ADAPT.Common.CompoundIdentifier Id = 1;
    int64 DeviceElementConfigurationId = 2;
    int64 HitchPointId = 3;
 }
message ConnectorType{
enum ConnectorTypeEnum
{
      Unkown = 0;
      ISO64893TractorDrawbar = 1;
      ISO730ThreePointHitchSemiMounted = 2;
      ISO730ThreePointHitchMounted = 3;
      ISO64891HitchHook = 4;
      ISO64892ClevisCoupling40 = 5;
      ISO64894PitonTypeCoupling = 6;
      ISO56922PivotWagonHitch = 7;
      ISO24347BallTypeHitch = 8;
      ChassisMountedSelfPropelled = 9;
}
}
message CornerArmType {
   enum CornerArmTypeEnum{
      Leading= 0;
      Trailing = 1;
  }
}


message DeviceElement {
    ADAPT.Common.CompoundIdentifier Id = 1;
    string Description = 2;
    string SerialNumber = 3;
    int64 ManufacturerId = 4;
    int64 BrandId = 5;
    int64 SeriesId = 6;
    repeated ADAPT.Common.ContextItem ContextItems = 7;
    ADAPT.Representations.EnumeratedValue DeviceClassification = 8;
    int64 DeviceModelId = 9;
    DeviceElementType DeviceElementType = 10;
    int64 ParentDeviceId = 11;
 }
 message DeviceElementConfiguration {
    ADAPT.Common.CompoundIdentifier Id = 1;
    int64 DeviceElementId = 2;
    string Description = 3;
    repeated ADAPT.Common.TimeScope TimeScopes = 4;
    repeated ADAPT.Representations.NumericRepresentationValue Offsets = 5;
    oneof subtype {
       ImplementConfiguration ImplementConfiguration = 101;
       MachineConfiguration MachineConfiguration = 102;
       SectionConfiguration SectionConfiguration = 103;
       IrrSectionConfiguration IrrSectionConfiguration = 104;
       EndgunConfiguration EndgunConfiguration = 105;
       IrrSystemConfiguration IrrSystemConfiguration = 106;
    }
 }
message DeviceElementType {
   string Value = 1;
   enum DeviceElementTypeEnum {
      Machine = 0;
      Implement = 1;
      Sensor = 2;
      Bin = 3;
      Section = 4;
      Unit = 5;
      Function = 6;
      IrrSystem = 7; // A mobile or fixed irrigation system such as a center pivot, linear, traveling gun, solid set, etc.
      IrrSection = 8;// A section of an IrrSystem. Different enough from a regular section to merit its own DeviceElementConfiguration
      Endgun = 9; // A device attached to an irrigation system that projects water beyond it.
   }
}
message IrrSystemType {
   enum IrrSystemTypeEnum{
      Pivot = 0;
      Linear = 1;
      FixedZone = 2;
      TravelingGun = 3;
      SetMove = 4;
    }
}

 message DeviceElementUse {
    ADAPT.Common.CompoundIdentifier Id = 1;
    int64 DeviceConfigurationId = 2;
    int64 OperationDataId = 3;
    int64 Depth = 4;
    int64 Order = 5;
    ADAPT.Representations.NumericRepresentationValue TotalDistanceTravelled = 6;
    ADAPT.Representations.NumericRepresentationValue TotalElapsedTime = 7;
 }
 message DeviceModel {
    ADAPT.Common.CompoundIdentifier Id = 1;
    string Description = 2;
    int64 SeriesId = 3;
    int64 BrandId = 4;
 }
 message DeviceSeries {
    ADAPT.Common.CompoundIdentifier Id = 1;
    string Description = 2;
    int64 BrandId = 3;
    repeated ADAPT.Common.ContextItem ContextItems = 4;
 }
 message EndgunConfiguration {
   EndgunTableEntry NominalValues =1;
   EndgunTable TabularValues = 2;
 }
 message EndgunTable {
     repeated EndgunTableEntry TableEntries = 1;
}
message EndgunTableEntry{
    ADAPT.Representations.NumericRepresentationValue Pressure = 1;
    ADAPT.Representations.NumericRepresentationValue FlowValue = 2;
    ADAPT.Representations.NumericRepresentationValue ThrowValue = 3;
}
message EquipmentConfiguration {
   ADAPT.Common.CompoundIdentifier Id = 1;
   string Description = 2;
   int64 Connector1Id = 3;
   int64 Connector2Id = 4;
 
}
message EquipmentConfigurationGroup {
   ADAPT.Common.CompoundIdentifier Id = 1;
   string Description = 2;
   repeated EquipmentConfiguration EquipmentConfigurations = 3;
   repeated ADAPT.Common.TimeScope TimeScopes = 4;
}
 message HitchPoint {
    ADAPT.Common.CompoundIdentifier Id = 1;
    HitchType HitchTypeEnum = 2;
    ReferencePoint ReferencePoint = 3;
 }
 message HitchType {
   enum HitchTypeEnum {
      Unkown = 0;
      ISO64893TractorDrawbar = 1;
      ISO730ThreePointHitchSemiMounted = 2;
      ISO730ThreePointHitchMounted = 3;
      ISO64891HitchHook = 4;
      ISO64892ClevisCoupling40 = 5;
      ISO64894PitonTypeCoupling = 6;
      ISO56922PivotWagonHitch = 7;
      ISO24347BallTypeHitch = 8;
   }
 }

 message ImplementConfiguration {
    ADAPT.Representations.NumericRepresentationValue Width = 1;
    ADAPT.Representations.NumericRepresentationValue TrackSpacing = 2;
    ADAPT.Representations.NumericRepresentationValue PhysicalWidth = 3;
    ADAPT.Representations.NumericRepresentationValue InGroundTurnRadius = 4;
    ADAPT.Representations.NumericRepresentationValue ImplementLength = 5;
    ADAPT.Representations.NumericRepresentationValue VerticalCuttingEdgeZOffset = 6;
    ADAPT.Representations.NumericRepresentationValue GPSReceiverZOffset = 7;
    ADAPT.Representations.NumericRepresentationValue YOffset = 8;
    ReferencePoint ControlPoint = 9;
 }
 message InstallationDisplacement {
   enum InstallationDisplacementEnum // Specifies the reference height from which sensor (or logger) vertical displacement is measured
   {
       MeanSeaLevel = 0;  // Height / depth is specified relative to mean seal level
       SoilSurface = 1;   // Height / depth is specified relative to the soil surface
       CropCanopyTop = 2; // Height / depth is specified relative to the top of the crop canopy
       Logger  = 3;       // Height / depth is specified relative to the position of the data logger
   }
 }
message IrrErrorCode {
   enum IrrErrorCodeEnum
   {
       Communication = 0;
       LowPressure = 1;
       Unspecified = 2;
   }
}
message IrrFlowDataSource {
   enum IrrFlowDataSourceEnum{
      FlowMeter = 0; // Flow data is being reported by a flow meter 
      HourMeter = 1; //  Flow data estimated by multiplying time by a constant 
      Unknown = 2; // Flow data not reported, or source unknown
  }
}
message IrrFlowTag {
   enum IrrFlowTagEnum{
      Chemigating = 0;
      Fertigating = 1;
   }
}

message IrrPressureLocation {
   enum IrrPressureLocationEnum
   {
      AtPump =0;
      AtBaseOfSystem = 1;
      AtEndOfSystem = 2;
      Unknown = 3;
   }
}

message IrrSectionConfiguration{
    IrrSectionType SectionType = 1;
    ADAPT.Representations.NumericRepresentationValue InnerDistance = 2;
    ADAPT.Representations.NumericRepresentationValue OuterDistance = 3;
    ADAPT.Shapes.MultiPolygon SpatialFootprint = 4;
    ADAPT.Representations.NumericRepresentationValue NominalEfficiency = 5;


}
message IrrSectionType {
   enum IrrSectionTypeEnum{
      Span = 0;
      Endboom = 1;
      EndGun = 2;
      Corner = 3;
      WrapBender = 4;
      Fixed = 5;
      Generic = 6;
  }
}

message IrrSystemModel{
    IrrSystemType SysType = 1;
}
message IrrSystemConfiguration {
   ADAPT.Shapes.Point SystemPosition = 1;
   int64 GrowerId = 2;
   int64 FarmId  = 3;
   int64 FieldId = 4;
   int64 CropZoneId = 5;
   repeated int64 SectionConfigurationIds = 6;
   ADAPT.Shapes.MultiPolygon SpatialFootprint = 7;
   ADAPT.Shapes.LineString GuidancePath = 8;
   CornerArmType CornerArmType = 9;
   IrrFlowDataSource FlowDataPedigree = 10;
   ADAPT.Common.GpsSource PositionDataPedigree = 11;
   TimeDataSource TimeDataPedigree = 12;
   ADAPT.Representations.NumericRepresentationValue SystemLength = 13;
   repeated int64 EndgunConfigurationIds = 14;
   ADAPT.Representations.NumericRepresentationValue NominalPressure = 15;
   IrrPressureLocation PressureLocation = 16;
   ADAPT.Representations.NumericRepresentationValue NominalEfficiency = 17;
   ADAPT.Representations.NumericRepresentationValue NominalFlow = 18;
   ADAPT.Representations.NumericRepresentationValue NominalFullCircleTime = 19;
   ADAPT.Representations.NumericRepresentationValue BearingOffset = 20;
   repeated ADAPT.Notes.Note Notes = 21;
   repeated ADAPT.Common.ContextItem ContextItems = 22;
}    
message MachineConfiguration {
    ADAPT.Representations.NumericRepresentationValue GpsReceiverXOffset = 1;
    ADAPT.Representations.NumericRepresentationValue GpsReceiverYOffset = 2;
    ADAPT.Representations.NumericRepresentationValue GpsReceiverZOffset = 3;
    OriginAxleLocation OriginAxleLocation = 4;
 }
 message OriginAxleLocation {
   enum OriginAxleLocationEnum {
      Front = 0;
      Rear = 1;
   }
 }


 message ReferencePoint {
   ADAPT.Common.CompoundIdentifier Id = 1;
   ADAPT.Representations.NumericRepresentationValue XOffset = 2;
   ADAPT.Representations.NumericRepresentationValue YOffset = 3;
   ADAPT.Representations.NumericRepresentationValue ZOffset = 4;
 }
 message SectionConfiguration {
    ADAPT.Representations.NumericRepresentationValue SectionWidth = 1;
    ADAPT.Representations.NumericRepresentationValue LateralOffset = 2;
    ADAPT.Representations.NumericRepresentationValue InlineOffset = 3;
 }
 
 message TelemetryMedium{
   enum TelemetryMediumEnum // Specifies the type of telemetry used by a device to send/receive data.
   {
      Radio = 0; // The device uses a radio transmitter to send/receive data. 
      Satellite= 1;     // The device uses a satellite system to send/receive data. 
      Hardwired= 2;     // The device uses a physical connection (e.g., current loop, I2C, etc.) to send/receive data. 
      CellularRadio = 3; // The device uses cellular telephony to send/receive data.
      Other = 4;         // The device uses an option not described above to send/receive data.
                     // Do not use "Other" to replace "unknown"; if the telemetry medium is unknown, leave the corresponding data field empty.
   }
 }

message TimeDataSource {
   enum TimeDataSourceEnum{
      GPSOnEvent = 0; // The timestamp is created using GPS data, when the event happens. (Most accurate)
      DeviceClockOnEvent = 1; // The timestamp is created using data from a realtime clock on the controller, panel, or device, when the event happens.
      ServerclockOnTransmission = 2; // The timestamp is created using data from the server receiving the event data. 
      DeviceClockOnTransmission = 3; // The timestamp is created using data from a realtime clock on the controller, panel or device, when the event data is transmitted. 
      ManualInput = 4; // The timestamp is input manually by an operator, asynchronously to the creation or transmission of the event.
      Unknown = 5;// The origin of timestamp data is unknown.
  }
}
